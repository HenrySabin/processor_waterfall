FLOWING CHART MODE SPECIFICATION
======================================

## Overview
The Flowing Chart Mode implements a "conveyor belt" visualization where transaction data moves from right to left across time buckets, creating a chronological flow effect that shows how transaction volume ages over time.

## Core Concept
Unlike Real-time Mode which recalculates all buckets based on actual transaction ages, Flowing Mode preserves existing data values and shifts them left every 500ms, simulating the natural aging of transaction data over time.

## Technical Implementation

### Data Structure
- 20 time buckets representing 0.5-second intervals (10 seconds total timeline)
- Each bucket: { name: "Xs", count: number }
- Timeline: 10s → 9.5s → 9s → ... → 1s → 0.5s (left to right)

### Initialization Process
1. **Bucket Setup**: Create 20 empty buckets (all counts = 0)
2. **Current Data Placement**: Place existing transactions in appropriate buckets based on actual age
3. **Animation Start**: Begin 500ms interval for conveyor belt effect

### Conveyor Belt Animation (Every 500ms)
```
STEP 1: Shift all data one position left (aging)
- Leftmost bucket (10s) gets cleared (count = 0) - data ages out
- Each bucket takes the count from the bucket to its right
- Data "flows" from newer (right) to older (left) positions

STEP 2: Add fresh data to rightmost bucket (0.5s)
- Calculate transactions with age 0-0.5 seconds
- Set rightmost bucket count to this fresh transaction count
- New data "enters" the timeline from the right
```

### Visual Flow Pattern
```
Time T:     [0][0][0][3][2][1][0][0][0][4]  ← 4 newest transactions
Time T+0.5: [0][0][0][0][3][2][1][0][0][2]  ← Data shifted left, 2 new
Time T+1.0: [0][0][0][0][0][3][2][1][0][1]  ← Continues flowing
```

## Key Differences from Real-time Mode

### Real-time Mode:
- ✅ **Accuracy**: Shows exact current transaction distribution
- ✅ **Precision**: All buckets calculated from actual transaction ages
- ❌ **Flow**: No visual movement, data can "jump" between buckets
- ❌ **Predictability**: Updates only when new WebSocket data arrives

### Flowing Mode:
- ✅ **Visual Flow**: Smooth conveyor belt movement every 500ms
- ✅ **Predictability**: Regular updates regardless of transaction timing
- ✅ **Chronological**: Data naturally ages from right to left
- ❌ **Accuracy**: Historical data may not reflect exact timestamps
- ❌ **Precision**: Older buckets contain shifted values, not recalculated

## State Management

### Mode Switching
- **To Flowing**: Initialize buckets and start interval
- **From Flowing**: Clear interval and cleanup
- **Mode Persistence**: Mode stays active until manually changed

### Interval Management
```javascript
// Start flowing animation
intervalRef.current = setInterval(() => {
  // Shift logic here
}, 500);

// Cleanup when switching modes
if (mode !== 'flowing') {
  clearInterval(intervalRef.current);
}
```

## Data Flow Architecture

### Input Sources
- **WebSocket Transactions**: Real-time transaction data
- **Mode Selection**: User toggle between 'realtime' and 'flowing'

### Processing Pipeline
1. **WebSocket Data** → Transaction Array
2. **Mode Check** → Initialize appropriate calculation
3. **Flowing Animation** → Shift + Add Fresh Data (if flowing mode)
4. **Chart Render** → Visual display with Recharts

### Output Visualization
- **Bar Chart**: 20 bars representing time buckets
- **Color Coding**: 
  - Bright blue (#1d4ed8): Newest bucket (0.5s)
  - Medium blue (#2563eb): Second newest bucket (1s)
  - Gray (#64748b): Older buckets
- **Flow Indicators**: "Old ←←← Conveyor Flow ←←← New"

## User Experience

### Expected Behavior
1. **Smooth Movement**: Data visibly flows left every 0.5 seconds
2. **Continuous Updates**: Regular animation regardless of transaction frequency
3. **Fresh Data Entry**: New transactions appear on the right
4. **Data Aging**: Existing data moves left and eventually disappears

### Visual Feedback
- **Mode Indicator**: "Live Transaction Timeline | Flowing Movement"
- **Animation Timing**: 400ms ease-out transitions for smooth bars
- **Flow Direction**: Clear left-pointing arrows showing data direction

## Edge Cases & Handling

### No New Transactions
- **Behavior**: Existing data continues to flow left
- **Rightmost Bucket**: Gets count of 0
- **Visual Effect**: Timeline empties gradually from right to left

### High Transaction Volume
- **Behavior**: Rightmost bucket shows current 0.5s transaction count
- **Overflow**: No overflow issues, bucket shows actual count
- **Performance**: 500ms interval prevents overwhelming updates

### Mode Switching During Animation
- **From Flowing**: Interval cleared immediately, no memory leaks
- **To Flowing**: New interval starts, recalculates fresh data placement
- **Data Continuity**: Smooth transition without data loss

### WebSocket Disconnection
- **Flowing Continues**: Animation continues with existing data
- **No Fresh Data**: Rightmost bucket gets 0 until reconnection
- **Graceful Degradation**: Visual flow maintained during outages

## Performance Considerations

### Interval Timing
- **500ms**: Balanced between smooth flow and performance
- **CPU Impact**: Minimal, only 20 array operations per tick
- **Memory**: Single interval reference, proper cleanup

### React Optimization
- **useEffect Dependencies**: [mode, transactions] prevents unnecessary reruns
- **State Updates**: Functional updates prevent stale closures
- **Cleanup**: Interval cleared on unmount and mode changes

## Testing Scenarios

### Basic Flow Test
1. Switch to Flowing Mode
2. Verify 500ms interval starts
3. Watch data shift left every 0.5 seconds
4. Confirm fresh data appears on right

### Mode Switching Test
1. Start in Real-time Mode
2. Switch to Flowing Mode - verify interval starts
3. Switch back to Real-time - verify interval stops
4. No console errors or memory leaks

### Data Continuity Test
1. Generate transactions while in Flowing Mode
2. Verify transactions appear in rightmost bucket
3. Watch them flow left over time
4. Confirm data ages out after 10 seconds

### Edge Case Test
1. Stop transaction generation
2. Verify existing data continues flowing
3. Confirm timeline empties gradually
4. Test reconnection behavior

## Future Enhancements

### Configurable Timing
- Allow user to adjust flow speed (250ms - 1000ms)
- Pause/resume flowing animation
- Step-by-step manual advancement

### Enhanced Visualization
- Trail effects showing data movement
- Gradient coloring based on age
- Particle effects for new data entry

### Advanced Modes
- Bidirectional flow for comparison
- Multiple timeline speeds
- Historical replay mode

## Conclusion
Flowing Mode provides an intuitive, visually appealing way to understand transaction timing by showing data movement through time buckets. While it sacrifices some precision for visual clarity, it offers valuable insights into transaction flow patterns and system behavior over time.